// generated by ddl2cpp E:\Projects\OOP-Cash\database\schema.sql E:\Projects\OOP-Cash\database\tables Table
#ifndef TABLE_TABLES_H
#define TABLE_TABLES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace Table
{
  namespace User_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Nickname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "nickname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T nickname;
            T& operator()() { return nickname; }
            const T& operator()() const { return nickname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Password
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "password";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T password;
            T& operator()() { return password; }
            const T& operator()() const { return password; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct User: sqlpp::table_t<User,
               User_::Id,
               User_::Username,
               User_::Nickname,
               User_::Password>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "User";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T User;
        T& operator()() { return User; }
        const T& operator()() const { return User; }
      };
    };
  };
  namespace Currency_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Rate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "rate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rate;
            T& operator()() { return rate; }
            const T& operator()() const { return rate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  }

  struct Currency: sqlpp::table_t<Currency,
               Currency_::Id,
               Currency_::Name,
               Currency_::Rate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Currency";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Currency;
        T& operator()() { return Currency; }
        const T& operator()() const { return Currency; }
      };
    };
  };
  namespace Bill_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct From
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "from";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T from;
            T& operator()() { return from; }
            const T& operator()() const { return from; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct To
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "to";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T to;
            T& operator()() { return to; }
            const T& operator()() const { return to; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Creator
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "creator";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creator;
            T& operator()() { return creator; }
            const T& operator()() const { return creator; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quantity;
            T& operator()() { return quantity; }
            const T& operator()() const { return quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Ctime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "ctime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ctime;
            T& operator()() { return ctime; }
            const T& operator()() const { return ctime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Finished
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "finished";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T finished;
            T& operator()() { return finished; }
            const T& operator()() const { return finished; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Date
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "date";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T date;
            T& operator()() { return date; }
            const T& operator()() const { return date; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T note;
            T& operator()() { return note; }
            const T& operator()() const { return note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct Bill: sqlpp::table_t<Bill,
               Bill_::Id,
               Bill_::From,
               Bill_::To,
               Bill_::Creator,
               Bill_::Quantity,
               Bill_::Ctime,
               Bill_::Finished,
               Bill_::Date,
               Bill_::Note>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Bill";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Bill;
        T& operator()() { return Bill; }
        const T& operator()() const { return Bill; }
      };
    };
  };
  namespace Account_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Uid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "uid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uid;
            T& operator()() { return uid; }
            const T& operator()() const { return uid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Cid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] =  "cid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cid;
            T& operator()() { return cid; }
            const T& operator()() const { return cid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  }

  struct Account: sqlpp::table_t<Account,
               Account_::Id,
               Account_::Name,
               Account_::Uid,
               Account_::Cid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "Account";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T Account;
        T& operator()() { return Account; }
        const T& operator()() const { return Account; }
      };
    };
  };
} // namespace Table
#endif
